!pip install keras
import numpy as np
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
(x train, y train),(x test, y test) = mnist.load data()
x_traio.shape
x test . shape
import matplotlib.pyplot as plt
x = np.zeros(100).reshape(10,10)
pit   . inns how(x,   cnap= ' gray    )
plt.imshow(x_train[200], cmap='gray')
y train[200]
pit . inns how(x tra in [220 j , cmap= ' gray ' )
plt.title(y tnain[220])
pit . inns how(x te st [ 220] , cmap= ' g nay ' )
plt.title(y test[220])
x = n p . a n may ( [ [ 2, 3, 5 ] , [ 8, 9, 8 ] j )
x
x . shape
x = x.flatter()
x . shape
img =  x_t nain[ 3 ]
img . shape
img = img . f latten ( ) 
img . shape
x_t r ai n  =  x_t ra in . reshape (60660,  784)
x  test  =  x  test . reshape ( 16060,  784)
x_train.shape
x =  np . array( [8,6,5,7 , 0, 3, 4, 2 ] )
x/8
x  train  =  x  t ra in  /  255
x  test  =  x  t ra in  /  255
set (y I ra i n )
import seaborn as sns
sns.countplot(x = y tnain)
from collections import Counter
Counter (y_train)
from keras.utils import to_categorical
x = [0,2,2,1,B,1,2]
to_categorical (x)
y train = to categorical(y train)
y test  = to   ca t egoni ca l (y test )
y_train.shape
y_test.shape

model = Sequential()

model.add(DeMse(784, input_shape=(784,), activation='relu'))model.add(Dense(256, activation='relu'))
model . add (Den se ( 10, act iv at ion= ' sof tina x ' } )model.summary()
model.compile(loss='categorical crossentropy',optimizer='adam',metrics = ['accuracy'' ])history = mode I . -Fit ( x_t ra i n , y_t ra i n , epochs= l8,
batch_size=10)
history.history
plt.subp1ot(1,2,1)
plt.plot(history.history['loss'], label='loss') 
plt.legend()

plt.subplot(1,2,2) 
pit.plot(history.history['accuracy'],
         label:'accuracy')
 plt.legend()

model.evaluate(x_test, y_test, batch_size=1)





